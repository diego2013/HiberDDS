CREATE TABLE ALARMLIMIT (
    ALARMLIMIT_ID NUMBER(10) NOT NULL,
    UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64),
    METRIC_ID VARCHAR2(64),
    LIMIT_TYPE VARCHAR2(32),
    CONSTRAINT PK_ALARMLIMIT PRIMARY KEY (ALARMLIMIT_ID),
    CONSTRAINT ALARMLIMIT_UNIQUE_INDEX UNIQUE (UNIQUE_DEVICE_IDENTIFIER,METRIC_ID,LIMIT_TYPE)
);
CREATE SEQUENCE ALARMLIMIT_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE ALARMLIMIT_LIFECYCLE (
    ALARMLIMIT_LIFECYCLE_ID NUMBER(10) NOT NULL,
    ALIVE CHAR(1),
    TIME TIMESTAMP(6),
    ALARMLIMIT_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_ALARMLIMIT_LIFECYCLE PRIMARY KEY (ALARMLIMIT_LIFECYCLE_ID),
    CONSTRAINT FK_ALARMLIMIT_LIFECYCLE FOREIGN KEY (ALARMLIMIT_ID)
        REFERENCES ALARMLIMIT(ALARMLIMIT_ID)
        ON DELETE CASCADE
);
CREATE SEQUENCE ALARMLIMIT_LIFECYCLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE ALARMLIMIT_SAMPLE (
    ALARMLIMIT_SAMPLE_ID NUMBER(10) NOT NULL,
    ALARMLIMIT_ID NUMBER(10) NOT NULL,
    SOURCE_TIME TIMESTAMP(6) NOT NULL,
    UNIT_IDENTIFIER VARCHAR2(64),
    VALUE FLOAT,
    CONSTRAINT PK_ALARMLIMIT_SAMPLE PRIMARY KEY (ALARMLIMIT_SAMPLE_ID),
    CONSTRAINT FK_ALARMLIMIT_SAMPLE FOREIGN KEY (ALARMLIMIT_ID)
        REFERENCES ALARMLIMIT(ALARMLIMIT_ID)
        ON DELETE CASCADE
) ORGANIZATION INDEX;
CREATE SEQUENCE ALARMLIMIT_SAMPLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE OR REPLACE FUNCTION UPSERT_ALARMLIMIT(
    UNIQUE_DEVICE_IDENTIFIER IN VARCHAR2, METRIC_ID IN VARCHAR2, LIMIT_TYPE IN VARCHAR2)
RETURN NUMBER
AS
ALARMLIMIT_ID NUMBER(10);
BEGIN
    SELECT ALARMLIMIT.ALARMLIMIT_ID INTO UPSERT_ALARMLIMIT.ALARMLIMIT_ID FROM ALARMLIMIT
    WHERE
        ((ALARMLIMIT.UNIQUE_DEVICE_IDENTIFIER IS NULL AND UPSERT_ALARMLIMIT.UNIQUE_DEVICE_IDENTIFIER IS NULL) OR ALARMLIMIT.UNIQUE_DEVICE_IDENTIFIER = UPSERT_ALARMLIMIT.UNIQUE_DEVICE_IDENTIFIER) 
        AND ((ALARMLIMIT.METRIC_ID IS NULL AND UPSERT_ALARMLIMIT.METRIC_ID IS NULL) OR ALARMLIMIT.METRIC_ID = UPSERT_ALARMLIMIT.METRIC_ID) 
        AND ((ALARMLIMIT.LIMIT_TYPE IS NULL AND UPSERT_ALARMLIMIT.LIMIT_TYPE IS NULL) OR ALARMLIMIT.LIMIT_TYPE = UPSERT_ALARMLIMIT.LIMIT_TYPE) 
;
RETURN UPSERT_ALARMLIMIT.ALARMLIMIT_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
BEGIN
    SELECT ALARMLIMIT_SEQ.nextval INTO UPSERT_ALARMLIMIT.ALARMLIMIT_ID FROM DUAL;
    INSERT INTO ALARMLIMIT (ALARMLIMIT_ID, UNIQUE_DEVICE_IDENTIFIER, METRIC_ID, LIMIT_TYPE) VALUES (UPSERT_ALARMLIMIT.ALARMLIMIT_ID, UPSERT_ALARMLIMIT.UNIQUE_DEVICE_IDENTIFIER, UPSERT_ALARMLIMIT.METRIC_ID, UPSERT_ALARMLIMIT.LIMIT_TYPE);
    COMMIT;
    RETURN UPSERT_ALARMLIMIT.ALARMLIMIT_ID;
END;
END;
/
CREATE TABLE PATIENTALERT (
    PATIENTALERT_ID NUMBER(10) NOT NULL,
    UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64),
    IDENTIFIER VARCHAR2(256),
    CONSTRAINT PK_PATIENTALERT PRIMARY KEY (PATIENTALERT_ID),
    CONSTRAINT PATIENTALERT_UNIQUE_INDEX UNIQUE (UNIQUE_DEVICE_IDENTIFIER,IDENTIFIER)
);
CREATE SEQUENCE PATIENTALERT_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE PATIENTALERT_LIFECYCLE (
    PATIENTALERT_LIFECYCLE_ID NUMBER(10) NOT NULL,
    ALIVE CHAR(1),
    TIME TIMESTAMP(6),
    PATIENTALERT_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_PATIENTALERT_LIFECYCLE PRIMARY KEY (PATIENTALERT_LIFECYCLE_ID),
    CONSTRAINT FK_PATIENTALERT_LIFECYCLE FOREIGN KEY (PATIENTALERT_ID)
        REFERENCES PATIENTALERT(PATIENTALERT_ID)
        ON DELETE CASCADE
);
CREATE SEQUENCE PATIENTALERT_LIFECYCLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE PATIENTALERT_SAMPLE (
    PATIENTALERT_SAMPLE_ID NUMBER(10) NOT NULL,
    PATIENTALERT_ID NUMBER(10) NOT NULL,
    SOURCE_TIME TIMESTAMP(6) NOT NULL,
    TEXT VARCHAR2(256),
    CONSTRAINT PK_PATIENTALERT_SAMPLE PRIMARY KEY (PATIENTALERT_SAMPLE_ID),
    CONSTRAINT FK_PATIENTALERT_SAMPLE FOREIGN KEY (PATIENTALERT_ID)
        REFERENCES PATIENTALERT(PATIENTALERT_ID)
        ON DELETE CASCADE
) ORGANIZATION INDEX;
CREATE SEQUENCE PATIENTALERT_SAMPLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE OR REPLACE FUNCTION UPSERT_PATIENTALERT(
    UNIQUE_DEVICE_IDENTIFIER IN VARCHAR2, IDENTIFIER IN VARCHAR2)
RETURN NUMBER
AS
PATIENTALERT_ID NUMBER(10);
BEGIN
    SELECT PATIENTALERT.PATIENTALERT_ID INTO UPSERT_PATIENTALERT.PATIENTALERT_ID FROM PATIENTALERT
    WHERE
        ((PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER IS NULL AND UPSERT_PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER IS NULL) OR PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER = UPSERT_PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER) 
        AND ((PATIENTALERT.IDENTIFIER IS NULL AND UPSERT_PATIENTALERT.IDENTIFIER IS NULL) OR PATIENTALERT.IDENTIFIER = UPSERT_PATIENTALERT.IDENTIFIER) 
;
RETURN UPSERT_PATIENTALERT.PATIENTALERT_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
BEGIN
    SELECT PATIENTALERT_SEQ.nextval INTO UPSERT_PATIENTALERT.PATIENTALERT_ID FROM DUAL;
    INSERT INTO PATIENTALERT (PATIENTALERT_ID, UNIQUE_DEVICE_IDENTIFIER, IDENTIFIER) VALUES (UPSERT_PATIENTALERT.PATIENTALERT_ID, UPSERT_PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER, UPSERT_PATIENTALERT.IDENTIFIER);
    COMMIT;
    RETURN UPSERT_PATIENTALERT.PATIENTALERT_ID;
END;
END;
/
CREATE TABLE TECHNICALALER (
    TECHNICALALER_ID NUMBER(10) NOT NULL,
    UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64),
    IDENTIFIER VARCHAR2(256),
    CONSTRAINT PK_TECHNICALALER PRIMARY KEY (TECHNICALALER_ID),
    CONSTRAINT TECHNICALALER_UNIQUE_INDEX UNIQUE (UNIQUE_DEVICE_IDENTIFIER,IDENTIFIER)
);
CREATE SEQUENCE TECHNICALALER_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE TECHNICALALER_LIFECYCLE (
    TECHNICALALER_LIFECYCLE_ID NUMBER(10) NOT NULL,
    ALIVE CHAR(1),
    TIME TIMESTAMP(6),
    TECHNICALALER_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_TECHNICALALER_LIFECYCLE PRIMARY KEY (TECHNICALALER_LIFECYCLE_ID),
    CONSTRAINT FK_TECHNICALALER_LIFECYCLE FOREIGN KEY (TECHNICALALER_ID)
        REFERENCES TECHNICALALER(TECHNICALALER_ID)
        ON DELETE CASCADE
);
CREATE SEQUENCE TECHNICALALER_LIFECYCLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE TECHNICALALER_SAMPLE (
    TECHNICALALER_SAMPLE_ID NUMBER(10) NOT NULL,
    TECHNICALALER_ID NUMBER(10) NOT NULL,
    SOURCE_TIME TIMESTAMP(6) NOT NULL,
    TEXT VARCHAR2(256),
    CONSTRAINT PK_TECHNICALALER_SAMPLE PRIMARY KEY (TECHNICALALER_SAMPLE_ID),
    CONSTRAINT FK_TECHNICALALER_SAMPLE FOREIGN KEY (TECHNICALALER_ID)
        REFERENCES TECHNICALALER(TECHNICALALER_ID)
        ON DELETE CASCADE
) ORGANIZATION INDEX;
CREATE SEQUENCE TECHNICALALER_SAMPLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE OR REPLACE FUNCTION UPSERT_TECHNICALALER(
    UNIQUE_DEVICE_IDENTIFIER IN VARCHAR2, IDENTIFIER IN VARCHAR2)
RETURN NUMBER
AS
TECHNICALALER_ID NUMBER(10);
BEGIN
    SELECT TECHNICALALER.TECHNICALALER_ID INTO UPSERT_TECHNICALALER.TECHNICALALER_ID FROM TECHNICALALER
    WHERE
        ((TECHNICALALER.UNIQUE_DEVICE_IDENTIFIER IS NULL AND UPSERT_TECHNICALALER.UNIQUE_DEVICE_IDENTIFIER IS NULL) OR TECHNICALALER.UNIQUE_DEVICE_IDENTIFIER = UPSERT_TECHNICALALER.UNIQUE_DEVICE_IDENTIFIER) 
        AND ((TECHNICALALER.IDENTIFIER IS NULL AND UPSERT_TECHNICALALER.IDENTIFIER IS NULL) OR TECHNICALALER.IDENTIFIER = UPSERT_TECHNICALALER.IDENTIFIER) 
;
RETURN UPSERT_TECHNICALALER.TECHNICALALER_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
BEGIN
    SELECT TECHNICALALER_SEQ.nextval INTO UPSERT_TECHNICALALER.TECHNICALALER_ID FROM DUAL;
    INSERT INTO TECHNICALALER (TECHNICALALER_ID, UNIQUE_DEVICE_IDENTIFIER, IDENTIFIER) VALUES (UPSERT_TECHNICALALER.TECHNICALALER_ID, UPSERT_TECHNICALALER.UNIQUE_DEVICE_IDENTIFIER, UPSERT_TECHNICALALER.IDENTIFIER);
    COMMIT;
    RETURN UPSERT_TECHNICALALER.TECHNICALALER_ID;
END;
END;
/
CREATE TABLE DEVICEIDENTIT (
    DEVICEIDENTIT_ID NUMBER(10) NOT NULL,
    UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64),
    CONSTRAINT PK_DEVICEIDENTIT PRIMARY KEY (DEVICEIDENTIT_ID),
    CONSTRAINT DEVICEIDENTIT_UNIQUE_INDEX UNIQUE (UNIQUE_DEVICE_IDENTIFIER)
);
CREATE SEQUENCE DEVICEIDENTIT_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE DEVICEIDENTIT_LIFECYCLE (
    DEVICEIDENTIT_LIFECYCLE_ID NUMBER(10) NOT NULL,
    ALIVE CHAR(1),
    TIME TIMESTAMP(6),
    DEVICEIDENTIT_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_DEVICEIDENTIT_LIFECYCLE PRIMARY KEY (DEVICEIDENTIT_LIFECYCLE_ID),
    CONSTRAINT FK_DEVICEIDENTIT_LIFECYCLE FOREIGN KEY (DEVICEIDENTIT_ID)
        REFERENCES DEVICEIDENTIT(DEVICEIDENTIT_ID)
        ON DELETE CASCADE
);
CREATE SEQUENCE DEVICEIDENTIT_LIFECYCLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE DEVICEIDENTIT_SAMPLE (
    DEVICEIDENTIT_SAMPLE_ID NUMBER(10) NOT NULL,
    DEVICEIDENTIT_ID NUMBER(10) NOT NULL,
    SOURCE_TIME TIMESTAMP(6) NOT NULL,
    MANUFACTURER NVARCHAR2(128),
    MODEL NVARCHAR2(128),
    SERIAL_NUMBER NVARCHAR2(128),
    BUILD VARCHAR2(128),
    OPERATING_SYSTEM VARCHAR2(128),
    CONSTRAINT PK_DEVICEIDENTIT_SAMPLE PRIMARY KEY (DEVICEIDENTIT_SAMPLE_ID),
    CONSTRAINT FK_DEVICEIDENTIT_SAMPLE FOREIGN KEY (DEVICEIDENTIT_ID)
        REFERENCES DEVICEIDENTIT(DEVICEIDENTIT_ID)
        ON DELETE CASCADE
) ORGANIZATION INDEX;
CREATE SEQUENCE DEVICEIDENTIT_SAMPLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE OR REPLACE FUNCTION UPSERT_DEVICEIDENTIT(
    UNIQUE_DEVICE_IDENTIFIER IN VARCHAR2)
RETURN NUMBER
AS
DEVICEIDENTIT_ID NUMBER(10);
BEGIN
    SELECT DEVICEIDENTIT.DEVICEIDENTIT_ID INTO UPSERT_DEVICEIDENTIT.DEVICEIDENTIT_ID FROM DEVICEIDENTIT
    WHERE
        ((DEVICEIDENTIT.UNIQUE_DEVICE_IDENTIFIER IS NULL AND UPSERT_DEVICEIDENTIT.UNIQUE_DEVICE_IDENTIFIER IS NULL) OR DEVICEIDENTIT.UNIQUE_DEVICE_IDENTIFIER = UPSERT_DEVICEIDENTIT.UNIQUE_DEVICE_IDENTIFIER) 
;
RETURN UPSERT_DEVICEIDENTIT.DEVICEIDENTIT_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
BEGIN
    SELECT DEVICEIDENTIT_SEQ.nextval INTO UPSERT_DEVICEIDENTIT.DEVICEIDENTIT_ID FROM DUAL;
    INSERT INTO DEVICEIDENTIT (DEVICEIDENTIT_ID, UNIQUE_DEVICE_IDENTIFIER) VALUES (UPSERT_DEVICEIDENTIT.DEVICEIDENTIT_ID, UPSERT_DEVICEIDENTIT.UNIQUE_DEVICE_IDENTIFIER);
    COMMIT;
    RETURN UPSERT_DEVICEIDENTIT.DEVICEIDENTIT_ID;
END;
END;
/
CREATE TABLE DEVICECONNECT (
    DEVICECONNECT_ID NUMBER(10) NOT NULL,
    UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64),
    CONSTRAINT PK_DEVICECONNECT PRIMARY KEY (DEVICECONNECT_ID),
    CONSTRAINT DEVICECONNECT_UNIQUE_INDEX UNIQUE (UNIQUE_DEVICE_IDENTIFIER)
);
CREATE SEQUENCE DEVICECONNECT_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE DEVICECONNECT_LIFECYCLE (
    DEVICECONNECT_LIFECYCLE_ID NUMBER(10) NOT NULL,
    ALIVE CHAR(1),
    TIME TIMESTAMP(6),
    DEVICECONNECT_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_DEVICECONNECT_LIFECYCLE PRIMARY KEY (DEVICECONNECT_LIFECYCLE_ID),
    CONSTRAINT FK_DEVICECONNECT_LIFECYCLE FOREIGN KEY (DEVICECONNECT_ID)
        REFERENCES DEVICECONNECT(DEVICECONNECT_ID)
        ON DELETE CASCADE
);
CREATE SEQUENCE DEVICECONNECT_LIFECYCLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE DEVICECONNECT_SAMPLE (
    DEVICECONNECT_SAMPLE_ID NUMBER(10) NOT NULL,
    DEVICECONNECT_ID NUMBER(10) NOT NULL,
    SOURCE_TIME TIMESTAMP(6) NOT NULL,
    STATE VARCHAR2(32),
    TYPE VARCHAR2(32),
    INFO NVARCHAR2(128),
    CONSTRAINT PK_DEVICECONNECT_SAMPLE PRIMARY KEY (DEVICECONNECT_SAMPLE_ID),
    CONSTRAINT FK_DEVICECONNECT_SAMPLE FOREIGN KEY (DEVICECONNECT_ID)
        REFERENCES DEVICECONNECT(DEVICECONNECT_ID)
        ON DELETE CASCADE
) ORGANIZATION INDEX;

CREATE SEQUENCE DEVICECONNECT_SAMPLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE OR REPLACE FUNCTION UPSERT_DEVICECONNECT(
    UNIQUE_DEVICE_IDENTIFIER IN VARCHAR2)
RETURN NUMBER
AS
DEVICECONNECT_ID NUMBER(10);
BEGIN
    SELECT DEVICECONNECT.DEVICECONNECT_ID INTO UPSERT_DEVICECONNECT.DEVICECONNECT_ID FROM DEVICECONNECT
    WHERE
        ((DEVICECONNECT.UNIQUE_DEVICE_IDENTIFIER IS NULL AND UPSERT_DEVICECONNECT.UNIQUE_DEVICE_IDENTIFIER IS NULL) OR DEVICECONNECT.UNIQUE_DEVICE_IDENTIFIER = UPSERT_DEVICECONNECT.UNIQUE_DEVICE_IDENTIFIER) 
;
RETURN UPSERT_DEVICECONNECT.DEVICECONNECT_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
BEGIN
    SELECT DEVICECONNECT_SEQ.nextval INTO UPSERT_DEVICECONNECT.DEVICECONNECT_ID FROM DUAL;
    INSERT INTO DEVICECONNECT (DEVICECONNECT_ID, UNIQUE_DEVICE_IDENTIFIER) VALUES (UPSERT_DEVICECONNECT.DEVICECONNECT_ID, UPSERT_DEVICECONNECT.UNIQUE_DEVICE_IDENTIFIER);
    COMMIT;
    RETURN UPSERT_DEVICECONNECT.DEVICECONNECT_ID;
END;
END;
/
CREATE TABLE NUMERIC (
    NUMERIC_ID NUMBER(10) NOT NULL,
    UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64),
    METRIC_ID VARCHAR2(64),
    VENDOR_METRIC_ID VARCHAR2(64),
    INSTANCE_ID NUMBER(10),
    UNIT_ID VARCHAR2(64),
    CONSTRAINT PK_NUMERIC PRIMARY KEY (NUMERIC_ID),
    CONSTRAINT NUMERIC_UNIQUE_INDEX UNIQUE (UNIQUE_DEVICE_IDENTIFIER,METRIC_ID,VENDOR_METRIC_ID,INSTANCE_ID,UNIT_ID)
);
CREATE SEQUENCE NUMERIC_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE NUMERIC_LIFECYCLE (
    NUMERIC_LIFECYCLE_ID NUMBER(10) NOT NULL,
    ALIVE CHAR(1),
    TIME TIMESTAMP(6),
    NUMERIC_ID NUMBER(10) NOT NULL,
    CONSTRAINT PK_NUMERIC_LIFECYCLE PRIMARY KEY (NUMERIC_LIFECYCLE_ID),
    CONSTRAINT FK_NUMERIC_LIFECYCLE FOREIGN KEY (NUMERIC_ID)
        REFERENCES NUMERIC(NUMERIC_ID)
        ON DELETE CASCADE
);
CREATE SEQUENCE NUMERIC_LIFECYCLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE TABLE NUMERIC_SAMPLE (
    NUMERIC_SAMPLE_ID NUMBER(10) NOT NULL,
    NUMERIC_ID NUMBER(10) NOT NULL,
    SOURCE_TIME TIMESTAMP(6) NOT NULL,
    VALUE FLOAT,
    DEVICE_TIME TIMESTAMP(6),
    PRESENTATION_TIME TIMESTAMP(6),
    CONSTRAINT PK_NUMERIC_SAMPLE PRIMARY KEY (NUMERIC_SAMPLE_ID),
    CONSTRAINT FK_NUMERIC_SAMPLE FOREIGN KEY (NUMERIC_ID)
        REFERENCES NUMERIC(NUMERIC_ID)
        ON DELETE CASCADE
) ORGANIZATION INDEX;
CREATE SEQUENCE NUMERIC_SAMPLE_SEQ MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;
CREATE OR REPLACE FUNCTION UPSERT_NUMERIC(
    UNIQUE_DEVICE_IDENTIFIER IN VARCHAR2, METRIC_ID IN VARCHAR2, VENDOR_METRIC_ID IN VARCHAR2, INSTANCE_ID IN NUMBER, UNIT_ID IN VARCHAR2)
RETURN NUMBER
AS
NUMERIC_ID NUMBER(10);
BEGIN
    SELECT NUMERIC.NUMERIC_ID INTO UPSERT_NUMERIC.NUMERIC_ID FROM NUMERIC
    WHERE
        ((NUMERIC.UNIQUE_DEVICE_IDENTIFIER IS NULL AND UPSERT_NUMERIC.UNIQUE_DEVICE_IDENTIFIER IS NULL) OR NUMERIC.UNIQUE_DEVICE_IDENTIFIER = UPSERT_NUMERIC.UNIQUE_DEVICE_IDENTIFIER) 
        AND ((NUMERIC.METRIC_ID IS NULL AND UPSERT_NUMERIC.METRIC_ID IS NULL) OR NUMERIC.METRIC_ID = UPSERT_NUMERIC.METRIC_ID) 
        AND ((NUMERIC.VENDOR_METRIC_ID IS NULL AND UPSERT_NUMERIC.VENDOR_METRIC_ID IS NULL) OR NUMERIC.VENDOR_METRIC_ID = UPSERT_NUMERIC.VENDOR_METRIC_ID) 
        AND ((NUMERIC.INSTANCE_ID IS NULL AND UPSERT_NUMERIC.INSTANCE_ID IS NULL) OR NUMERIC.INSTANCE_ID = UPSERT_NUMERIC.INSTANCE_ID) 
        AND ((NUMERIC.UNIT_ID IS NULL AND UPSERT_NUMERIC.UNIT_ID IS NULL) OR NUMERIC.UNIT_ID = UPSERT_NUMERIC.UNIT_ID) 
;
RETURN UPSERT_NUMERIC.NUMERIC_ID;
EXCEPTION WHEN NO_DATA_FOUND THEN
BEGIN
    SELECT NUMERIC_SEQ.nextval INTO UPSERT_NUMERIC.NUMERIC_ID FROM DUAL;
    INSERT INTO NUMERIC (NUMERIC_ID, UNIQUE_DEVICE_IDENTIFIER, METRIC_ID, VENDOR_METRIC_ID, INSTANCE_ID, UNIT_ID) VALUES (UPSERT_NUMERIC.NUMERIC_ID, UPSERT_NUMERIC.UNIQUE_DEVICE_IDENTIFIER, UPSERT_NUMERIC.METRIC_ID, UPSERT_NUMERIC.VENDOR_METRIC_ID, UPSERT_NUMERIC.INSTANCE_ID, UPSERT_NUMERIC.UNIT_ID);
    COMMIT;
    RETURN UPSERT_NUMERIC.NUMERIC_ID;
END;
END;
/
