CREATE USER OPENICE2 IDENTIFIED BY OPENICE2
GRANT CREATE SESSION TO OPENICE2 WITH ADMIN OPTION;


CREATE TABLE NUMERIC (
	NUMERIC_ID NUMBER(10) NOT NULL,
	UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64) NOT NULL,
	METRIC_ID VARCHAR2(64) NOT NULL,
	VENDOR_METRIC_ID VARCHAR2(64),
	INSTANCE_ID NUMBER(10) NOT NULL,
	UNIT_ID VARCHAR2(64),
	CONSTRAINT PK_NUMERIC PRIMARY KEY (NUMERIC_ID)
);

CREATE UNIQUE INDEX NUMERIC_UNIQUE_KEYS ON NUMERIC (UNIQUE_DEVICE_IDENTIFIER,METRIC_ID,VENDOR_METRIC_ID,INSTANCE_ID,UNIT_ID);

CREATE SEQUENCE NUMERIC_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE NUMERIC_LIFECYCLE (
	NUMERIC_LIFECYCLE_ID NUMBER(10) NOT NULL,
	ALIVE NUMBER(10),
	TIME TIMESTAMP(6),
	NUMERIC_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_NUMERIC_LIFECYCLE PRIMARY KEY (NUMERIC_LIFECYCLE_ID)
);

CREATE INDEX FK_LIFECYCLE_NUMERIC ON NUMERIC_LIFECYCLE (NUMERIC_ID);

ALTER TABLE NUMERIC_LIFECYCLE
	ADD FOREIGN KEY (NUMERIC_ID) 
	REFERENCES NUMERIC (NUMERIC_ID);

CREATE SEQUENCE  NUMERIC_LIFECYCLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE NUMERIC_SAMPLE (
	NUMERIC_SAMPLE_ID NUMBER(10) NOT NULL,
	SOURCE_TIME TIMESTAMP(6) NOT NULL,
	VALUE NUMBER(10) NOT NULL,
	NUMERIC_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_NUMERIC_SAMPLE PRIMARY KEY (NUMERIC_SAMPLE_ID)
);

CREATE INDEX FK_NUMERIC_ID ON NUMERIC_SAMPLE (NUMERIC_ID);

ALTER TABLE NUMERIC_SAMPLE
	ADD FOREIGN KEY (NUMERIC_ID) 
	REFERENCES NUMERIC (NUMERIC_ID);

CREATE SEQUENCE  NUMERIC_SAMPLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE OR REPLACE FUNCTION INSERT_UPDATE_NUMERIC(
   UNIQUE_DEVICE_IDENTIFIER IN varchar2,
   METRIC_ID IN varchar2,
   VENDOR_METRIC_ID IN varchar2,
   INSTANCE_ID IN decimal,
   UNIT_ID IN varchar2
   
) 
RETURN NUMBER
AS
NUMERIC_ID NUMBER(10);
BEGIN
 SELECT NUMERIC.NUMERIC_ID INTO insert_update_numeric.NUMERIC_ID FROM NUMERIC 
 	WHERE NUMERIC.UNIQUE_DEVICE_IDENTIFIER = insert_update_numeric.UNIQUE_DEVICE_IDENTIFIER AND 
 		  NUMERIC.METRIC_ID = insert_update_numeric.METRIC_ID AND 
 		  ((NUMERIC.VENDOR_METRIC_ID IS NULL AND insert_update_numeric.VENDOR_METRIC_ID IS NULL) OR NUMERIC.VENDOR_METRIC_ID = insert_update_numeric.VENDOR_METRIC_ID) AND
 		  NUMERIC.INSTANCE_ID = insert_update_numeric.INSTANCE_ID AND 
 		  ((NUMERIC.UNIT_ID IS NULL AND insert_update_numeric.UNIT_ID IS NULL) OR NUMERIC.UNIT_ID = insert_update_numeric.UNIT_ID);
 RETURN insert_update_numeric.NUMERIC_ID; 		  
 EXCEPTION WHEN NO_DATA_FOUND THEN
 BEGIN
    SELECT NUMERIC_SEQ.nextval into insert_update_numeric.NUMERIC_ID FROM dual;
    INSERT INTO NUMERIC (NUMERIC_ID, UNIQUE_DEVICE_IDENTIFIER, METRIC_ID, VENDOR_METRIC_ID, INSTANCE_ID, UNIT_ID) VALUES (insert_update_numeric.NUMERIC_ID, UNIQUE_DEVICE_IDENTIFIER, METRIC_ID, VENDOR_METRIC_ID, INSTANCE_ID, UNIT_ID);
    COMMIT;
    RETURN insert_update_numeric.NUMERIC_ID;
 END;
END;
/
CREATE TABLE TECHNICALALERT (
	TECHNICALALERT_ID NUMBER(10) NOT NULL,
	UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64) NOT NULL,
	IDENTIFIER VARCHAR2(256) NOT NULL,
	CONSTRAINT PK_TECHNICALALERT PRIMARY KEY (TECHNICALALERT_ID)
);

CREATE UNIQUE INDEX TECHNICALALERT_UNIQUE_KEYS ON TECHNICALALERT (UNIQUE_DEVICE_IDENTIFIER,IDENTIFIER);

CREATE SEQUENCE TECHNICALALERT_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE TECHNICALALERT_LIFECYCLE (
	TECHNICALALERT_LIFECYCLE_ID NUMBER(10) NOT NULL,
	ALIVE NUMBER(10),
	TIME TIMESTAMP(6),
	TECHNICALALERT_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_TECHNICALALERT PRIMARY KEY (TECHNICALALERT_LIFECYCLE_ID)
);

CREATE INDEX FK_LIFECYCLE_TECHNICALALERT ON TECHNICALALERT_LIFECYCLE (TECHNICALALERT_ID);

ALTER TABLE TECHNICALALERT_LIFECYCLE
	ADD FOREIGN KEY (TECHNICALALERT_ID) 
	REFERENCES TECHNICALALERT (TECHNICALALERT_ID);

CREATE SEQUENCE  TECHNICALALERT_LIFECYCLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE TECHNICALALERT_SAMPLE (
	TECHNICALALERT_SAMPLE_ID NUMBER(10) NOT NULL,
	TECHNICALALERT_ID NUMBER(10) NOT NULL,
	SOURCE_TIME TIMESTAMP(6) NOT NULL,
	TEXT VARCHAR2(256),
	CONSTRAINT PK_TECHNICALALERT_SAMPLE PRIMARY KEY (TECHNICALALERT_SAMPLE_ID)
);

CREATE INDEX FK_TECHNICALALERT_ID ON TECHNICALALERT_SAMPLE (TECHNICALALERT_ID);

ALTER TABLE TECHNICALALERT_SAMPLE
	ADD FOREIGN KEY (TECHNICALALERT_ID) 
	REFERENCES TECHNICALALERT (TECHNICALALERT_ID);

CREATE SEQUENCE  TECHNICALALERT_SAMPLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE OR REPLACE FUNCTION INSERT_UPDATE_TECHNICALALERT(
   UNIQUE_DEVICE_IDENTIFIER IN varchar2,
   IDENTIFIER IN varchar2
) 
RETURN NUMBER
AS
TECHNICALALERT_ID NUMBER(10);
BEGIN
 SELECT TECHNICALALERT.TECHNICALALERT_ID INTO insert_update_TECHNICALALERT.TECHNICALALERT_ID FROM TECHNICALALERT 
 	WHERE TECHNICALALERT.UNIQUE_DEVICE_IDENTIFIER = insert_update_TECHNICALALERT.UNIQUE_DEVICE_IDENTIFIER AND 
 		  TECHNICALALERT.IDENTIFIER = insert_update_TECHNICALALERT.IDENTIFIER;
 RETURN insert_update_TECHNICALALERT.TECHNICALALERT_ID; 		  
 EXCEPTION WHEN NO_DATA_FOUND THEN
 BEGIN
    SELECT TECHNICALALERT_SEQ.nextval into insert_update_TECHNICALALERT.TECHNICALALERT_ID FROM dual;
    INSERT INTO TECHNICALALERT (TECHNICALALERT_ID, UNIQUE_DEVICE_IDENTIFIER, IDENTIFIER) VALUES (insert_update_TECHNICALALERT.TECHNICALALERT_ID, insert_update_TECHNICALALERT.UNIQUE_DEVICE_IDENTIFIER, insert_update_TECHNICALALERT.IDENTIFIER);
    COMMIT;
    RETURN insert_update_TECHNICALALERT.TECHNICALALERT_ID;
 END;
END;
/
CREATE TABLE PATIENTALERT (
	PATIENTALERT_ID NUMBER(10) NOT NULL,
	UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64) NOT NULL,
	IDENTIFIER VARCHAR2(256) NOT NULL,
	CONSTRAINT PK_PATIENTALERT PRIMARY KEY (PATIENTALERT_ID)
);

CREATE UNIQUE INDEX PATIENTALERT_UNIQUE_KEYS ON PATIENTALERT (UNIQUE_DEVICE_IDENTIFIER,IDENTIFIER);

CREATE SEQUENCE PATIENTALERT_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE PATIENTALERT_LIFECYCLE (
	PATIENTALERT_LIFECYCLE_ID NUMBER(10) NOT NULL,
	ALIVE NUMBER(10),
	TIME TIMESTAMP(6),
	PATIENTALERT_ID NUMBER(10) NOT NULL,
	CONSTRAINT PK_PATIENTALERT_LIFECYCLE PRIMARY KEY (PATIENTALERT_LIFECYCLE_ID)
);

CREATE INDEX FK_LIFECYCLE_PATIENTALERT ON PATIENTALERT_LIFECYCLE (PATIENTALERT_ID);

ALTER TABLE PATIENTALERT_LIFECYCLE
	ADD FOREIGN KEY (PATIENTALERT_ID) 
	REFERENCES PATIENTALERT (PATIENTALERT_ID);

CREATE SEQUENCE  PATIENTALERT_LIFECYCLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE PATIENTALERT_SAMPLE (
	PATIENTALERT_SAMPLE_ID NUMBER(10) NOT NULL,
	PATIENTALERT_ID NUMBER(10) NOT NULL,
	SOURCE_TIME TIMESTAMP(6) NOT NULL,
	TEXT VARCHAR2(256),
	CONSTRAINT PK_PATIENTALERT_SAMPLE PRIMARY KEY (PATIENTALERT_SAMPLE_ID)
);

CREATE INDEX FK_PATIENTALERT_ID ON PATIENTALERT_SAMPLE (PATIENTALERT_ID);

ALTER TABLE PATIENTALERT_SAMPLE
	ADD FOREIGN KEY (PATIENTALERT_ID) 
	REFERENCES PATIENTALERT (PATIENTALERT_ID);

CREATE SEQUENCE  PATIENTALERT_SAMPLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE OR REPLACE FUNCTION INSERT_UPDATE_PATIENTALERT(
   UNIQUE_DEVICE_IDENTIFIER IN varchar2,
   IDENTIFIER IN varchar2
) 
RETURN NUMBER
AS
PATIENTALERT_ID NUMBER(10);
BEGIN
 SELECT PATIENTALERT.PATIENTALERT_ID INTO insert_update_PATIENTALERT.PATIENTALERT_ID FROM PATIENTALERT 
 	WHERE PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER = insert_update_PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER AND 
 		  PATIENTALERT.IDENTIFIER = insert_update_PATIENTALERT.IDENTIFIER;
 RETURN insert_update_PATIENTALERT.PATIENTALERT_ID; 		  
 EXCEPTION WHEN NO_DATA_FOUND THEN
 BEGIN
    SELECT PATIENTALERT_SEQ.nextval into insert_update_PATIENTALERT.PATIENTALERT_ID FROM dual;
    INSERT INTO PATIENTALERT (PATIENTALERT_ID, UNIQUE_DEVICE_IDENTIFIER, IDENTIFIER) VALUES (insert_update_PATIENTALERT.PATIENTALERT_ID, insert_update_PATIENTALERT.UNIQUE_DEVICE_IDENTIFIER, insert_update_PATIENTALERT.IDENTIFIER);
    COMMIT;
    RETURN insert_update_PATIENTALERT.PATIENTALERT_ID;
 END;
END;
/
show errors

--Device Connectivity
CREATE TABLE DEVICE_CONNECTIVITY(
	DEVICE_CONNECTIVITY_ID NUMBER(10) NOT NULL,
	UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64) NOT NULL,
	CONSTRAINT PK_DEV_CONN PRIMARY KEY (DEVICE_CONNECTIVITY_ID)
);

CREATE UNIQUE INDEX DEV_CONN_UNIQUE_KEYS ON DEVICE_CONNECTIVITY (UNIQUE_DEVICE_IDENTIFIER);

CREATE SEQUENCE DEV_CONN_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE  DEVICE_CONNECTIVITY_LC(
	DEVCONN_LIFECYCLE_ID NUMBER(10) NOT NULL,
	DEVICE_CONNECTIVITY_ID NUMBER(10) NOT NULL,
	TIME TIMESTAMP(6),
	ALIVE NUMBER(10),
	PRIMARY KEY (DEVCONN_LIFECYCLE_ID),
);

CREATE INDEX FK_LIFECYCLE_DEVCONN ON DEVICE_CONNECTIVITY_LC (DEVICE_CONNECTIVITY_ID);

ALTER TABLE DEVICE_CONNECTIVITY_LC
	ADD FOREIGN KEY (DEVICE_CONNECTIVITY_ID) 
	REFERENCES DEVICE_CONNECTIVITY (DEVICE_CONNECTIVITY_ID);

CREATE SEQUENCE  DEVCONN_LIFECYCLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE DEVICE_CONNECTIVITY_SAMPLE(
	DEVICE_CONNECTIVITY_ID NUMBER(10) NOT NULL,
	DEVCONN_SAMPLE_ID NUMBER(10) NOT NULL,
	CONNECTIONSTATE VARCHAR2(15),
	CONNECTIONTYPE VARCHAR2(10),
	INFO VARCHAR2(128),
	SOURCE_TIME TIMESTAMP(6),
	PRIMARY KEY (DEVCONN_SAMPLE_ID)
);

CREATE INDEX FK_DEVCONN_SAMPLE ON DEVICE_CONNECTIVITY_SAMPLE (DEVICE_CONNECTIVITY_ID);

ALTER TABLE DEVICE_CONNECTIVITY_SAMPLE
	ADD FOREIGN KEY (DEVICE_CONNECTIVITY_ID) 
	REFERENCES DEVICE_CONNECTIVITY (DEVICE_CONNECTIVITY_ID);

CREATE SEQUENCE  DEVCONN_SAMPLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE OR REPLACE FUNCTION INSERT_UPDATE_DEVCONN(
   UNIQUE_DEVICE_IDENTIFIER IN varchar2
) 
RETURN NUMBER
AS
DEVICE_CONNECTIVITY_ID NUMBER;
BEGIN
 SELECT DEVICE_CONNECTIVITY_ID INTO DEVICE_CONNECTIVITY_ID FROM DEVICE_CONNECTIVITY WHERE UNIQUE_DEVICE_IDENTIFIER = INSERT_UPDATE_DEVCONN.UNIQUE_DEVICE_IDENTIFIER;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 BEGIN
    SELECT DEV_CONN_SEQ.nextval into DEVICE_CONNECTIVITY_ID FROM dual;
    INSERT INTO DEVICE_CONNECTIVITY (DEVICE_CONNECTIVITY_ID, UNIQUE_DEVICE_IDENTIFIER) VALUES (DEVICE_CONNECTIVITY_ID, UNIQUE_DEVICE_IDENTIFIER);
 END;

 COMMIT;
 RETURN DEVICE_CONNECTIVITY_ID;
END;
/


-- device identity


CREATE TABLE DEVICE_IDENTITY(
	DEVICE_IDENTITY_ID NUMBER(10) NOT NULL,
	UNIQUE_DEVICE_IDENTIFIER VARCHAR2(64) NOT NULL,
	CONSTRAINT PK_DEVICE_IDENTITY PRIMARY KEY (DEVICE_IDENTITY_ID)
);

CREATE UNIQUE INDEX DEVICE_IDENTITY_UNIQUE_KEYS ON DEVICE_IDENTITY (UNIQUE_DEVICE_IDENTIFIER);

CREATE SEQUENCE DEVICE_IDENTITY_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE  DEVICE_IDENTITY_LC(
	DEVICE_IDENTITY_LIFECYCLE_ID NUMBER(10) NOT NULL,
	DEVICE_IDENTITY_ID NUMBER(10) NOT NULL,
	TIME TIMESTAMP(6),
	ALIVE NUMBER(10),
	PRIMARY KEY (DEVICE_IDENTITY_LIFECYCLE_ID),
);

CREATE INDEX FK_LIFECYCLE_DEVICE_IDENTITY ON DEVICE_IDENTITY_LC (DEVICE_IDENTITY_ID);

ALTER TABLE DEVICE_IDENTITY_LC
	ADD FOREIGN KEY (DEVICE_IDENTITY_ID) 
	REFERENCES DEVICE_IDENTITY (DEVICE_IDENTITY_ID);

CREATE SEQUENCE  DEVICE_IDENTITY_LIFECYCLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE TABLE DEVICE_IDENTITY_SAMPLE(
	DEVICE_IDENTITY_ID NUMBER(10) NOT NULL,
	DEVICE_IDENTITY_SAMPLE_ID NUMBER(10) NOT NULL,
	MANUFACTURER VARCHAR2(128),
	MODEL VARCHAR2(128),
	SERIAL_NUMBER VARCHAR2(128),
	BUILD VARCHAR2(128),
	OPERATING_SYSTEM VARCHAR2(128),
	SOURCE_TIME TIMESTAMP(6),
	PRIMARY KEY (DEVICE_IDENTITY_SAMPLE_ID)
);

CREATE INDEX FK_DEVICE_IDENTITY_SAMPLE ON DEVICE_IDENTITY_SAMPLE (DEVICE_IDENTITY_ID);

ALTER TABLE DEVICE_IDENTITY_SAMPLE
	ADD FOREIGN KEY (DEVICE_IDENTITY_ID) 
	REFERENCES DEVICE_IDENTITY (DEVICE_IDENTITY_ID);

CREATE SEQUENCE  DEVICE_IDENTITY_SAMPLE_SEQ  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;



CREATE OR REPLACE FUNCTION INSERT_UPDATE_DEVICE_IDENTITY(
   UNIQUE_DEVICE_IDENTIFIER IN varchar2
   
) 
RETURN NUMBER
AS
DEVICE_IDENTITY_ID NUMBER;
BEGIN
 SELECT DEVICE_IDENTITY_ID INTO DEVICE_IDENTITY_ID FROM DEVICE_IDENTITY WHERE UNIQUE_DEVICE_IDENTIFIER = INSERT_UPDATE_DEVICE_IDENTITY.UNIQUE_DEVICE_IDENTIFIER;
 EXCEPTION WHEN NO_DATA_FOUND THEN
 BEGIN
    SELECT DEVICE_IDENTITY_SEQ.nextval into DEVICE_IDENTITY_ID FROM dual;
    INSERT INTO DEVICE_IDENTITY (DEVICE_IDENTITY_ID, UNIQUE_DEVICE_IDENTIFIER) VALUES (DEVICE_IDENTITY_ID, UNIQUE_DEVICE_IDENTIFIER);
 END;

 COMMIT;
 RETURN DEVICE_IDENTITY_ID;
END;
/
show errors

